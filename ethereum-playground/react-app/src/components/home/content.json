[
    { "name": "Passo 1", "content": "## Workshop SmartContracts TDC 2018\n\nOlá, este workshop apresentará os passos iniciais de um nó local da blockchain da Ethereum.\n\n### Primeiros Passos\n\nO nó local da Ethereum que está sendo executado no container **node-geth-mining** já criou a conta inicial do nó e iniciou o processo de mineração de moeda. Por padrão o resultado da mineração vai para a primeira conta no nó sendo executado. \nPara verificar as contas existentes em nosso nó utilizamos o comando\n```js\neth.accounts\n```\nPara verificar o saldo de uma conta utilizamos o comando *eth.getBalance(hashDaConta)* conforme o exemplo abaixo\n```js\neth.getBalance(eth.accounts[0])\n```\nO saldo é apresentado na menor unidade da moeda, também conhecida como Wei, todas as unidades são uma homenagem a algum entusiasta ou grande contribuidor do cenário de criptomoedas:\n\n1 wei = **0.000000000000000001 Ether.** \n\nO wei é o análogo do Satoshi a menor fração de 1 Bitcoin.\n\nPara visualizar o saldo em Ether, podemos utilizar o comando\n```js\nweb3.fromWei(eth.getBalance(eth.accounts[0]),\"ether\")\n```" },
    { "name": "Passo 2", "content": "### Criando uma Conta\n\nPara a criação de contas no nó, é necessário utilizar o comando *personal.newAccount(password)*,onde o parametro password é passado como texto. A função retorna como resultado o endereço da conta.\n```js\npersonal.newAccount(\"teste\")\n```\n\n### Desbloqueando uma Conta\n\nPara fazer operações com uma conta, ela necessita estar desbloqueada. Para efetuar o desbloqueio de uma conta utilizamos o comando *personal.unlockAccount(enderecoDaConta, passwordDaConta, 0)*. A função retorna como resultado true caso a operação seja realizada com sucesso.\n```js\npersonal.unlockAccount(eth.accounts[0], \"12345678\", 0)\n```\n\n### Transferências entre Contas\n\nPara realizar transferências de valor entre as contas utilizamos o comando *eth.sendTransaction({from:enderecoContaOrigem, to:enderecoContaDestino, value: web3.toWei(valorEmEther, \"ether\")})*.\n\nA função retorna como resultado o hash da transação. Se o resultado for {} a transação não foi\nrealizada. Um dos erros mais comuns é a conta de origem não ter sido desbloqueada conforme o cimando acima.\n\n```js\nweb3.fromWei(eth.getBalance(eth.accounts[1]),\"ether\")\neth.sendTransaction({from:eth.accounts[0], to:eth.accounts[1], value: web3.toWei(10, \"ether\")})\nweb3.fromWei(eth.getBalance(eth.accounts[1]),\"ether\")\n```\n\n### Verificação de Transações\n\nPara realizar a verificação de uma transação utilizamos o comando *eth.getTransaction(hashDaTransacao)*. A função retorna como resultado **se a transação foi validada ou não**.\n```js\neth.getTransaction(\"hash Da Transação de Transferencia anterior\")\n```" },
    { "name": "Passo 3", "content": "### Criando um Contrato\n\nPara a criação de contratos iremos utilizar a linguagem Solidity. Para conhecer mais sobre ela acesse https://solidity.readthedocs.io. Em nosso primeiro contrato, utilizaremos o seguinte codigo:\n\n```js\npragma solidity ^0.4.18;\n\ncontract Register {\n    address public owner;\n    string private info;\n\n    function register() public {\n        owner = msg.sender;\n    }\n    \n    function setInfo(string _info) public {\n        info = _info;\n    }\n    \n    function getInfo() public view returns (string infostring) {\n        return info;\n    }\n}\n```\nPara compilar os contratos, você pode utilizar compilador online disponível em https://remix.ethereum.org. Após compilar você deve clicar no botão *Details* e copiar o código disponível com o título *WEB3DEPLOY*\n\n### Registrando o contrato\n\nPara registrar o contrato em nossa blockchain, utilizaremos os comandos abaixo. Lembrando que a conta 0 deve estar desbloqueada. Para instruções de como desbloquear a conta retorne ao passo 2.\n\n```js\nvar registerContract = web3.eth.contract([{\"constant\":false,\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"name\":\"infostring\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_info\",\"type\":\"string\"}],\"name\":\"setInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]);\n```\n\n```js\nvar register = registerContract.new(\n   {\n     from: web3.eth.accounts[0], \n     data: '0x608060405234801561001057600080fd5b506103c2806100206000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631aa3a008146100675780635a9b0b891461007e5780638da5cb5b1461010e578063937f6e7714610165575b600080fd5b34801561007357600080fd5b5061007c6101ce565b005b34801561008a57600080fd5b50610093610210565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100d35780820151818401526020810190506100b8565b50505050905090810190601f1680156101005780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561011a57600080fd5b506101236102b2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561017157600080fd5b506101cc600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506102d7565b005b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b606060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102a85780601f1061027d576101008083540402835291602001916102a8565b820191906000526020600020905b81548152906001019060200180831161028b57829003601f168201915b5050505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600190805190602001906102ed9291906102f1565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061033257805160ff1916838001178555610360565b82800160010185558215610360579182015b8281111561035f578251825591602001919060010190610344565b5b50905061036d9190610371565b5090565b61039391905b8082111561038f576000816000905550600101610377565b5090565b905600a165627a7a7230582066e16878bb2c2f7be122612a0d6e587eeb47f1897d9cf1e819a21d586c3a0f220029', \n     gas: '4700000'\n   }, function (e, contract){\n    console.log(e, contract);\n    if (typeof contract.address !== 'undefined') {\n         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);\n    }\n })\n```\n\nApós a execução das instruções é importante coletar as seguintes informações, número do contrato e sua abi.\nPara recuperar o número do contrato\n```js\nregister.address\n```\n\nPara recuperar a abi\n```js\nregister.abi\n```\n\n### Interagindo com o Contrato\n\nCom o contrato já instanciado, podemos chamar os métodos que foram criados (getInfo e setInfo).\nPara recuperar o valor que está no contrato:\n```js\nregister.getInfo()\n```\n\nPara setar um valor no contrato utilizamos o método setInfo.Passamos como parâmetro o valor que queremos incluir no contrato e um objeto com a conta e o valor de gas para débito. O retorno será o hash da transação. \nPara consultar a execução da transação podemos utilizar o comando que vimos no passo 2.\n```js\nregister.setInfo(\"-->Valor<--\", { from:eth.accounts[0], gas:1000000 })\n```\n\nApós a execução da transação podemos verificar o valor constante no contrato:\n```js\nregister.getInfo()\n```\n\n### Instanciando um contrato já existente\n\nPara instanciar um contrato que já está registrado em nossa blockchain, necessitamos do endereço do contrato e sua abi. \n\n```js\nvar baseContract = eth.contract(abi); \n```\n```js\nvar register= baseContract.at(numeroDoContrato);\n```\n\nApós a execução, podemos interagir com o contrato conforme a seção acima *Interagindo com o Contrato*\n\n" },
    { "name": "Passo 4", "content": "### Conclusão\n\nCom a execução destes 3 passos, pudemos conhecer o funcionamento básico de um nó local da Ethereum e como criar um contrato inicial e registrá-lo na blockchain.\n\nEste conteúdo foi montado com base no workshop realizado no TDC SP 2018, ministrado por Solange Gueiros.\n\nPara ampliar o seu conhecimento, sugiro algumas referências abaixo.\n\n### Referências\n\nEthereum\n\nhttps://www.ethereum.org\n\nBase do Workshop\n\nhttps://medium.com/@solangegueiros/how-to-publish-an-information-at-ethereum-blockchain-and-retrieve-it-after-at-windows-fe08b9c62d1d\n\nConsulta aos nós da rede\n\nhttps://www.ethernodes.org/network/1\n\nInformações sobre Gas\n\nhttps://ethgasstation.info/\n\nConsulta de Contratos\n\nhttp://etherscan.io/" }
]